:root {
  --max: 900px;
  --cloud: #eee;
  --smoke: #ddd;
  --bone: #ccc;
  --gray: #aaa;
  --dark: #444;
  --blue: #0048ff;
  --lightblue: #a1cdff;
  --neonblue: #daecff;
  --red: #ff3434;
  --neonred: #ff6868;
  --yellow: #ffd900;
  --neonyellow: #ffff8a;
  --green: #00c220;
  --neongreen: #a0f9af;
  --orange: #ffa200;
  --neonorange: #ffab52;
}

* {
  /* transition: all .4s; */
}

svg {
  height: 1em;
  vertical-align: -0.125em;
  pointer-events: none;
}

svg path {
  fill: currentColor;
}

a {
  color: inherit;
  text-decoration: none;
}

img {
  display: block;
  max-width: 100%;
}

.container {
  max-width: var(--max);
  margin: auto;
}

.header-title {
  margin: 0.5em;
  text-align: center;
  font-size: 2em;
}

.content-container {
  gap: 1em;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  max-width: none;
  width: fit-content;
}

.content {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: fit-content;
  margin: auto;
}

.board {
  display: grid;
  grid-template-columns: repeat(10, minmax(10%, 3em));
  width: fit-content;
  margin: auto;
  border: 1px solid #f5f5f5;
  /* position: relative; */
}

.board-ship {
  transition: none;
  background-color: var(--lightblue);
  user-select: none;
}

.board-ship-hover {
  opacity: 0.5;
}

.board-title {
  font-size: 1.5em;
}

.board-square {
  box-sizing: border-box;
  aspect-ratio: 1;
  background-color: var(--neonblue);
  background-color: white;
  border: none;
  border: 1px solid #f5f5f5;
}

.missed-square {
  background-color: var(--neonyellow);
  border-color: transparent;
}

.hit-cell {
  background-color: var(--neonred);
  border-color: transparent;
  z-index: 1;
}

.valid-square {
  opacity: 0.5;
  background-color: var(--neongreen);
  border-color: transparent;
  z-index: 1;
}

.invalid-square {
  opacity: 0.5;
  background-color: var(--neonorange);
  border-color: transparent;
  z-index: 1;
}

.btn {
  padding: 4px 8px;
  font-size: 100%;
  background-color: var(--cloud);
  border: none;
  border-radius: 4px;
  outline: 1px solid transparent;
  outline-offset: -2px;
  transition: all 0.1s;
}

.btn:focus {
  outline-color: white;
}

.btn:hover {
  background-color: var(--bone);
}

.btn:active {
  background-color: white;
}

.started {
  color: white;
  background-color: var(--red) !important;
}

dialog {
  font-size: 2em;
  font-weight: bold;
  text-align: center;
  color: white;
  background-color: transparent;
  border: none;
}

/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
  transform: scale(1);
}

/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scale(0);
  transition:
    opacity 0.7s ease-out,
    transform 0.7s ease-out,
    overlay 0.7s ease-out allow-discrete,
    display 0.7s ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scale(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition:
    display 0.7s allow-discrete,
    overlay 0.7s allow-discrete,
    background-color 0.7s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 25%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
